# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CouchdbImporter
                                 A QGIS plugin
 This plugin allows importing vector data from the couchdb database.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-01-30
        git sha              : $Format:%H$
        copyright            : (C) 2020 by MaximeGavens/Geomatys
        email                : contact@geomatys.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys
import requests
couchdb_dir = os.path.join(os.path.dirname(__file__), 'couchdb')
if couchdb_dir not in sys.path:
    sys.path.append(couchdb_dir)
import couchdb
from .utils import Utils


class CouchdbConnectorException(Exception):
    def __init__(self, *args):
        if args:
            self.message = args[0]
        else:
            self.message = None

    def __str__(self):
        if self.message:
            return 'CouchdbConnectorException, {0} '.format(self.message)
        else:
            return 'CouchdbConnectorException has been raised'


class CouchdbConnector(object):
    def __init__(self, http, url, user, password):
        self.url = url
        self.user = user
        self.password = password
        self.address = http + "://" + self.user + ":" + self.password + "@" + self.url + "/"
        self.connection = couchdb.Server(self.address)
        self.libelleRefId = {}

    def getAddress(self):
        return self.address

    def getConnection(self):
        return self.connection

    def getFilteredConnection(self):
        result = []
        for name in self.connection:
            if not Utils.is_str_start_by_underscore(name):
                r = requests.get(self.address + name)
                if r.status_code == 200:
                    result.append(name)
        return result

    def request_database(self, database, className=None, attributes=None, ids=None, single=None):
        if className is not None and attributes is not None:
            query = Utils.build_query(className, attributes, ids)
        elif className is None and attributes is None and ids is not None:
            query = Utils.build_query_only_id(ids)
        elif single is not None:
            query = Utils.build_query_one_id(single)
        else:
            raise CouchdbConnectorException("Requ√®te inexistante.")
        db = self.connection[database]
        return db.find(query)

    def get_and_save_label_from_id(self, database, Id):
        if database not in self.libelleRefId:
            self.libelleRefId[database] = {}
        if Id not in self.libelleRefId[database]:
            result = self.request_database(database, single=Id)
            result = list(result)
            if len(result) == 0:
                label = Id
            else:
                label = Utils.get_label(result[0])
            self.libelleRefId[database][Id] = label
        return self.libelleRefId[database][Id]

    def replace_id_by_label_in_result(self, database, target):
        for elem in target:
            self.replace_id_by_label(database, elem)

    def replace_id_by_label(self, database, elem):
        attrWithIdValue = ['author']

        for attr in elem:
            if attr[-2:] == 'Id' or attr in attrWithIdValue:
                if elem[attr] is not None:
                    elem[attr] = self.get_and_save_label_from_id(database, elem[attr])
            elif attr[-3:] == 'Ids' and type(elem[attr]) == list:
                labelList = []
                for val in elem[attr]:
                    if val is not None:
                        label = self.get_and_save_label_from_id(database, val)
                    labelList.append(label)
                elem[attr] = labelList
            elif type(elem[attr]) == list:
                for elem2 in elem[attr]:
                    self.replace_id_by_label(database, elem2)
            elif type(elem[attr]) == dict:
                self.replace_id_by_label(database, elem[attr])
